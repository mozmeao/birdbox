# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

[tool.ruff]
# Set what ruff should check for.
# See https://beta.ruff.rs/docs/rules/ for a list of rules.
select = [
    # TODO: Enable flake8-builtin and fix errors to fix variable name shadowing errors.
    # "A", # flake8-builtin errors.
    # TODO: Enable bugbear and fix errors.
    # "B", # bugbear errors
    "DJ", # flake8-django errors.
    "E", # pycodestyle errors
    "F", # pyflakes errors
    "I", # import sorting
    "Q", # flake8-quotes errors
    "W", # pycodestyle warnings
]
line-length = 150  # To match black
target-version = 'py39'
extend-exclude = ["__pycache__", "docs", "assets", "static", "bedrock/externalfiles/files_cache"]

[tool.ruff.per-file-ignores]
"birdbox/birdbox/settings/development.py" = ["F403", "F405"]
"birdbox/birdbox/settings/test.py" = ["F403", "F405"]
"birdbox/birdbox/settings/prod.py" = ["F403", "F405"]
"birdbox/microsite/migrations/*.py" = ["E501"]

[tool.ruff.isort]
known-first-party = ["birdbox", "common", "microsite"]
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]
combine-as-imports = true

[tool.ruff.isort.sections]
django = ["django"]

[tool.black]
line-length = 150  # To match ruff
target-version = ['py39']
include = '\.pyi?$'

[tool.coverage.run]
omit = [
    ".github/*",
    ".venv/*",
    "**/migrations/*",
    "**/tests/*",
    "config/*",
    "conftest.py",
    "docs/*",
    "manage.py",
    "node_modules/*",
    "python_coverage/*",
    "setup.py",
    "static/*",
    "tests/*",
    "venv/*",
    "wsgi/*",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
]
ignore_errors = true

[tool.coverage.html]
directory = "python_coverage"
